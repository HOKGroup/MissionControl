// Generated by CoffeeScript 1.6.3
var extendr, typeChecker,
  __slice = [].slice,
  __hasProp = {}.hasOwnProperty;

typeChecker = require('typechecker');

extendr = {
  clone: function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    args.unshift({});
    return this.shallowExtendPlainObjects.apply(this, args);
  },
  deepClone: function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    args.unshift({});
    return this.deepExtendPlainObjects.apply(this, args);
  },
  extend: function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.shallowExtendPlainObjects.apply(this, args);
  },
  deepExtend: function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.deepExtendPlainObjects.apply(this, args);
  },
  shallowExtendPlainObjects: function() {
    var key, obj, objs, target, value, _i, _len;
    target = arguments[0], objs = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = objs.length; _i < _len; _i++) {
      obj = objs[_i];
      obj || (obj = {});
      for (key in obj) {
        if (!__hasProp.call(obj, key)) continue;
        value = obj[key];
        target[key] = value;
      }
    }
    return target;
  },
  safeShallowExtendPlainObjects: function() {
    var key, obj, objs, target, value, _i, _len;
    target = arguments[0], objs = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = objs.length; _i < _len; _i++) {
      obj = objs[_i];
      obj || (obj = {});
      for (key in obj) {
        if (!__hasProp.call(obj, key)) continue;
        value = obj[key];
        if (value == null) {
          continue;
        }
        target[key] = value;
      }
    }
    return target;
  },
  deepExtendPlainObjects: function() {
    var key, obj, objs, target, value, _i, _len;
    target = arguments[0], objs = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = objs.length; _i < _len; _i++) {
      obj = objs[_i];
      obj || (obj = {});
      for (key in obj) {
        if (!__hasProp.call(obj, key)) continue;
        value = obj[key];
        if (typeChecker.isPlainObject(value)) {
          if (!typeChecker.isPlainObject(target[key])) {
            target[key] = {};
          }
          this.deepExtendPlainObjects(target[key], value);
        } else if (typeChecker.isArray(value)) {
          target[key] = value.slice();
        } else {
          target[key] = value;
        }
      }
    }
    return target;
  },
  safeDeepExtendPlainObjects: function() {
    var key, obj, objs, target, value, _i, _len;
    target = arguments[0], objs = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = objs.length; _i < _len; _i++) {
      obj = objs[_i];
      obj || (obj = {});
      for (key in obj) {
        if (!__hasProp.call(obj, key)) continue;
        value = obj[key];
        if (value == null) {
          continue;
        }
        if (typeChecker.isPlainObject(value)) {
          if (!typeChecker.isPlainObject(target[key])) {
            target[key] = {};
          }
          this.safeDeepExtendPlainObjects(target[key], value);
        } else if (typeChecker.isArray(value)) {
          target[key] = value.slice();
        } else {
          target[key] = value;
        }
      }
    }
    return target;
  },
  dereference: function(source) {
    var target;
    target = JSON.parse(JSON.stringify(source));
    return target;
  }
};

module.exports = extendr;
