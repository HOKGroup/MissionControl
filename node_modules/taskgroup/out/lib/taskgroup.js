// Generated by CoffeeScript 1.10.0
(function() {
  var EventEmitter, Interface, Task, TaskGroup, ambi, csextends, domain, events, queue, ref, util, wait,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  queue = (typeof global !== "undefined" && global !== null ? global.setImmediate : void 0) || process.nextTick;

  events = require('events');

  domain = (ref = ((function() {
    try {
      return require('domain');
    } catch (undefined) {}
  })())) != null ? ref : null;

  util = require('util');

  EventEmitter = require('events').EventEmitter;

  ambi = require('ambi');

  csextends = require('csextends');

  wait = function(delay, fn) {
    return setTimeout(fn, delay);
  };

  Interface = (function(superClass) {
    extend(Interface, superClass);

    function Interface() {
      var me;
      Interface.__super__.constructor.apply(this, arguments);
      me = this;
      this.on('error', function() {
        var args, err;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        err = args[0];
        if (me.listeners('done').length !== 0) {
          return this.emit.apply(this, ['done'].concat(slice.call(args)));
        } else if (err && me.listeners('error').length === 1) {
          console.error(err.stack || err);
          throw err;
        }
      });
      this.on('completed', function() {
        var args, err;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        err = args[0];
        if (me.listeners('done').length !== 0) {
          return this.emit.apply(this, ['done'].concat(slice.call(args)));
        } else if (err && me.listeners('completed').length === 1) {
          console.error(err.stack || err);
          throw err;
        }
      });
      this;
    }

    Interface.prototype.complete = function() {
      var err;
      err = (function() {
        throw Error('interface should provide this');
      })();
      this.emit('error', err);
      return this;
    };

    Interface.prototype.whenDone = function(listener) {
      if (typeof listener === 'function') {
        this.on('done', listener.bind(this));
      }
      return this;
    };

    Interface.prototype.onceDone = function(listener) {
      if (typeof listener === 'function') {
        this.once('done', listener);
      }
      return this;
    };

    Interface.prototype.done = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.onceDone.apply(this, args);
    };

    Interface.prototype.getNames = function(opts) {
      var name, names, ref1;
      if (opts == null) {
        opts = {};
      }
      if (opts.format == null) {
        opts.format = 'string';
      }
      if (opts.separator == null) {
        opts.separator = ' âžž  ';
      }
      names = ((ref1 = this.config.parent) != null ? ref1.getNames({
        format: 'array'
      }) : void 0) || [];
      if (name = this.getName()) {
        names.push(name);
      }
      if (opts.format !== 'array') {
        names = names.join(opts.separator);
      }
      return names;
    };

    Interface.prototype.getName = function() {
      var base;
      return (base = this.config).name != null ? base.name : base.name = this.type + " " + (Math.random());
    };

    Interface.prototype.getConfig = function() {
      return this.config;
    };

    Interface.prototype.queue = function(fn) {
      if (this.config.sync) {
        fn();
      } else {
        queue(fn);
      }
      return this;
    };

    return Interface;

  })(EventEmitter);

  Task = (function(superClass) {
    extend(Task, superClass);

    Task.prototype.type = 'task';

    Task.isTask = function(item) {
      return (item != null ? item.type : void 0) === 'task' || item instanceof Task;
    };

    Task.subclass = csextends;

    Task.create = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(this, args, function(){});
    };

    Task.prototype.err = null;

    Task.prototype.result = null;

    Task.prototype.status = null;

    Task.prototype.events = null;

    Task.prototype.taskDomain = null;

    Task.prototype.config = null;

    function Task() {
      var args, base, base1, base2, base3, base4;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      Task.__super__.constructor.apply(this, arguments);
      if (this.config == null) {
        this.config = {};
      }
      if ((base = this.config).run == null) {
        base.run = false;
      }
      if ((base1 = this.config).onError == null) {
        base1.onError = 'exit';
      }
      if ((base2 = this.config).ambi == null) {
        base2.ambi = true;
      }
      if ((base3 = this.config).domain == null) {
        base3.domain = true;
      }
      if ((base4 = this.config).sync == null) {
        base4.sync = false;
      }
      if (this.events == null) {
        this.events = [];
      }
      this.events.push('error', 'started', 'running', 'failed', 'passed', 'completed', 'done', 'destroyed');
      this.setConfig(args);
      this;
    }

    Task.prototype.setConfig = function(opts) {
      var _key, _value, arg, args, i, key, len, value;
      if (opts == null) {
        opts = {};
      }
      if (Array.isArray(opts)) {
        args = opts;
        opts = {};
        for (i = 0, len = args.length; i < len; i++) {
          arg = args[i];
          if (!arg) {
            continue;
          }
          switch (typeof arg) {
            case 'string':
              opts.name = arg;
              break;
            case 'function':
              opts.method = arg;
              break;
            case 'object':
              for (key in arg) {
                if (!hasProp.call(arg, key)) continue;
                value = arg[key];
                opts[key] = value;
              }
          }
        }
      }
      for (key in opts) {
        if (!hasProp.call(opts, key)) continue;
        value = opts[key];
        switch (key) {
          case 'on':
            for (_key in value) {
              if (!hasProp.call(value, _key)) continue;
              _value = value[_key];
              if (value) {
                this.on(_key, _value);
              }
            }
            break;
          case 'once':
            for (_key in value) {
              if (!hasProp.call(value, _key)) continue;
              _value = value[_key];
              if (value) {
                this.once(_key, _value);
              }
            }
            break;
          case 'whenDone':
            if (value) {
              this.whenDone(value);
            }
            break;
          case 'onceDone':
          case 'done':
          case 'next':
            if (value) {
              this.done(value);
            }
            break;
          default:
            this.config[key] = value;
        }
      }
      return this;
    };

    Task.prototype.hasStarted = function() {
      return this.status !== null;
    };

    Task.prototype.hasExited = function() {
      var ref1;
      return (ref1 = this.status) === 'completed' || ref1 === 'destroyed';
    };

    Task.prototype.isDestroyed = function() {
      return this.status === 'destroyed';
    };

    Task.prototype.isComplete = function() {
      var ref1;
      return (ref1 = this.status) === 'failed' || ref1 === 'passed' || ref1 === 'destroyed';
    };

    Task.prototype.exit = function() {
      var args, err, ref1, ref2, ref3, stateInformation, stateNames;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (args[0] != null) {
        if (this.err == null) {
          this.err = args[0];
        }
      }
      if (this.isComplete() === false) {
        if (args.length !== 0) {
          this.result = args;
        }
        this.status = (this.err != null ? 'failed' : 'passed');
        this.emit(this.status, this.err);
        this.complete();
      } else if (this.config.onError !== 'ignore') {
        stateNames = this.getNames();
        stateInformation = util.inspect({
          error: ((ref1 = this.err) != null ? (ref2 = ref1.stack) != null ? typeof ref2.toString === "function" ? ref2.toString() : void 0 : void 0 : void 0) || ((ref3 = this.err) != null ? ref3.message : void 0) || this.err,
          previousResult: this.result,
          currentArguments: args
        });
        err = new Error("The task [" + stateNames + "] just completed, but it had already completed earlier, this is unexpected. State information is:\n" + stateInformation);
        this.emit('error', err);
      }
      return this;
    };

    Task.prototype.complete = function() {
      var complete;
      complete = this.isComplete();
      if (complete) {
        this.emit.apply(this, ['completed'].concat(slice.call(this.result || [])));
        this.err = null;
      }
      return complete;
    };

    Task.prototype.whenDone = function(listener) {
      if (this.isComplete()) {
        this.queue((function(_this) {
          return function() {
            return listener.apply(_this, _this.result || []);
          };
        })(this));
      } else {
        Task.__super__.whenDone.call(this, listener);
      }
      return this;
    };

    Task.prototype.onceDone = function(listener) {
      if (this.isComplete()) {
        this.queue((function(_this) {
          return function() {
            return listener.apply(_this, _this.result || []);
          };
        })(this));
      } else {
        Task.__super__.onceDone.call(this, listener);
      }
      return this;
    };

    Task.prototype.resetResults = function() {
      this.result = [];
      return this;
    };

    Task.prototype.destroy = function() {
      this.done((function(_this) {
        return function() {
          if (_this.status === 'destroyed') {
            return;
          }
          _this.emit(_this.status = 'destroyed');
          _this.resetResults();
          return _this.removeAllListeners();
        };
      })(this));
      return this;
    };

    Task.prototype.fire = function() {
      var args, complete, completeOriginal, err, error, fireMethod, me, ref1;
      me = this;
      args = (this.config.args || []).slice();
      if ((((ref1 = me.config.method) != null ? ref1.bind : void 0) != null) === false) {
        err = new Error("The task [" + (me.getNames()) + "] failed to run as no method was defined for it.");
        me.emit('error', err);
        return this;
      }
      if (this.config.domain !== false && (this.taskDomain != null) === false && ((domain != null ? domain.create : void 0) != null)) {
        this.taskDomain = domain.create();
        this.taskDomain.on('error', this.exit.bind(this));
        complete = function() {
          var args, ref2;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          if ((ref2 = me.taskDomain) != null) {
            ref2.exit();
          }
          return me.exit.apply(me, args);
        };
      } else {
        complete = this.exit.bind(this);
      }
      fireMethod = function() {
        var methodToFire;
        methodToFire = me.config.method.bind(me);
        if (me.config.ambi !== false) {
          return ambi.apply(null, [methodToFire].concat(slice.call(args)));
        } else {
          return methodToFire.apply(null, args);
        }
      };
      if (me.config.timeout) {
        me.timeout = wait(me.config.timeout, function() {
          if (me.isComplete() === false) {
            err = new Error("The task [" + (me.getNames()) + "] has timed out.");
            return me.exit(err);
          }
        });
      }
      me.emit(me.status = 'running');
      if (process.browser || process.versions.node.substr(0, 3) === '0.8') {
        completeOriginal = complete;
        complete = function() {
          var args;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          process.nextTick(function() {
            return completeOriginal.apply(null, args);
          });
          return me;
        };
        args.push(complete);
        try {
          if (this.taskDomain != null) {
            this.taskDomain.run(fireMethod);
          } else {
            fireMethod();
          }
        } catch (error) {
          err = error;
          me.exit(err);
        }
      } else {
        args.push(complete);
        if (this.taskDomain != null) {
          this.taskDomain.run(fireMethod);
        } else {
          fireMethod();
        }
      }
      return this;
    };

    Task.prototype.run = function() {
      this.queue((function(_this) {
        return function() {
          var err;
          if (_this.hasStarted()) {
            err = new Error("The task [" + (_this.getNames()) + "] was just about to start, but it already started earlier, this is unexpected.");
            return _this.emit('error', err);
          } else {
            _this.emit(_this.status = 'started');
            return _this.fire();
          }
        };
      })(this));
      return this;
    };

    return Task;

  })(Interface);

  TaskGroup = (function(superClass) {
    extend(TaskGroup, superClass);

    TaskGroup.prototype.Task = Task;

    TaskGroup.prototype.TaskGroup = TaskGroup;

    TaskGroup.prototype.type = 'taskgroup';

    TaskGroup.isTaskGroup = function(group) {
      return (group != null ? group.type : void 0) === 'taskgroup' || group instanceof TaskGroup;
    };

    TaskGroup.subclass = csextends;

    TaskGroup.create = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(this, args, function(){});
    };

    TaskGroup.prototype.itemsRemaining = null;

    TaskGroup.prototype.itemsRunning = null;

    TaskGroup.prototype.itemsCompleted = null;

    TaskGroup.prototype.results = null;

    TaskGroup.prototype.err = null;

    TaskGroup.prototype.status = null;

    TaskGroup.prototype.events = null;

    TaskGroup.prototype.config = null;

    function TaskGroup() {
      var args, base, base1, base2, me;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      me = this;
      TaskGroup.__super__.constructor.apply(this, arguments);
      if (this.config == null) {
        this.config = {};
      }
      if ((base = this.config).concurrency == null) {
        base.concurrency = 1;
      }
      if ((base1 = this.config).onError == null) {
        base1.onError = 'exit';
      }
      if ((base2 = this.config).sync == null) {
        base2.sync = false;
      }
      if (this.itemsRemaining == null) {
        this.itemsRemaining = [];
      }
      if (this.itemsRunning == null) {
        this.itemsRunning = [];
      }
      if (this.itemsCompleted == null) {
        this.itemsCompleted = [];
      }
      if (this.results == null) {
        this.results = [];
      }
      if (this.events == null) {
        this.events = [];
      }
      this.events.push('error', 'started', 'running', 'passed', 'failed', 'completed', 'done', 'destroyed');
      this.setConfig(args);
      this.queue(this.autoRun.bind(this));
      this;
    }

    TaskGroup.prototype.setNestedTaskConfig = function(config) {
      var base, key, value;
      if (config == null) {
        config = {};
      }
      if ((base = this.config).nestedTaskConfig == null) {
        base.nestedTaskConfig = {};
      }
      for (key in config) {
        if (!hasProp.call(config, key)) continue;
        value = config[key];
        this.config.nestedTaskConfig[key] = value;
      }
      return this;
    };

    TaskGroup.prototype.setNestedConfig = function(config) {
      var base, key, value;
      if (config == null) {
        config = {};
      }
      this.setConfig(config);
      if ((base = this.config).nestedConfig == null) {
        base.nestedConfig = {};
      }
      for (key in config) {
        if (!hasProp.call(config, key)) continue;
        value = config[key];
        this.config.nestedConfig[key] = value;
      }
      return this;
    };

    TaskGroup.prototype.setConfig = function(opts) {
      var _key, _value, arg, args, i, key, len, value;
      if (opts == null) {
        opts = {};
      }
      if (Array.isArray(opts)) {
        args = opts;
        opts = {};
        for (i = 0, len = args.length; i < len; i++) {
          arg = args[i];
          if (!arg) {
            continue;
          }
          switch (typeof arg) {
            case 'string':
              opts.name = arg;
              break;
            case 'function':
              opts.method = arg;
              break;
            case 'object':
              for (key in arg) {
                if (!hasProp.call(arg, key)) continue;
                value = arg[key];
                opts[key] = value;
              }
          }
        }
      }
      for (key in opts) {
        if (!hasProp.call(opts, key)) continue;
        value = opts[key];
        switch (key) {
          case 'on':
            for (_key in value) {
              if (!hasProp.call(value, _key)) continue;
              _value = value[_key];
              if (value) {
                this.on(_key, _value);
              }
            }
            break;
          case 'once':
            for (_key in value) {
              if (!hasProp.call(value, _key)) continue;
              _value = value[_key];
              if (value) {
                this.once(_key, _value);
              }
            }
            break;
          case 'whenDone':
            if (value) {
              this.whenDone(value);
            }
            break;
          case 'onceDone':
          case 'done':
          case 'next':
            if (value) {
              this.done(value);
            }
            break;
          case 'task':
          case 'tasks':
            if (value) {
              this.addTasks(value);
            }
            break;
          case 'group':
          case 'groups':
            if (value) {
              this.addGroups(value);
            }
            break;
          case 'item':
          case 'items':
            if (value) {
              this.addItems(value);
            }
            break;
          default:
            this.config[key] = value;
        }
      }
      return this;
    };

    TaskGroup.prototype.addMethod = function(method, config) {
      if (config == null) {
        config = {};
      }
      if (method == null) {
        method = this.config.method.bind(this);
      }
      method.isTaskGroupMethod = true;
      if (config.name == null) {
        config.name = 'taskgroup method for ' + this.getName();
      }
      if (config.args == null) {
        config.args = [this.addGroup.bind(this), this.addTask.bind(this)];
      }
      if (config.includeInResults == null) {
        config.includeInResults = false;
      }
      return this.addTask(method, config);
    };

    TaskGroup.prototype.autoRun = function() {
      var base, item;
      if (this.config.method) {
        item = this.addMethod();
        if ((this.config.parent != null) === false) {
          if ((base = this.config).run == null) {
            base.run = true;
          }
        }
      }
      if (this.config.run === true) {
        this.run();
      }
      return this;
    };

    TaskGroup.prototype.addItem = function() {
      var args, base, item, me;
      item = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      me = this;
      if (!item) {
        return null;
      }
      item.setConfig({
        parent: this,
        sync: this.config.sync
      });
      if (args.length !== 0) {
        item.setConfig.apply(item, args);
      }
      if ((base = item.config).name == null) {
        base.name = item.type + " " + (this.getItemsTotal() + 1) + " for " + (this.getName());
      }
      if (Task.isTask(item)) {
        if (this.config.nestedConfig != null) {
          item.setConfig(this.config.nestedConfig);
        }
        if (this.config.nestedTaskConfig != null) {
          item.setConfig(this.config.nestedTaskConfig);
        }
        item.events.forEach(function(event) {
          return item.on(event, function() {
            var args;
            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            return me.emit.apply(me, ["task." + event, item].concat(slice.call(args)));
          });
        });
        this.emit('task.add', item);
      } else if (TaskGroup.isTaskGroup(item)) {
        if (this.config.nestedConfig != null) {
          item.setNestedConfig(this.config.nestedConfig);
        }
        if (this.config.nestedTaskConfig != null) {
          item.setConfig({
            nestedTaskConfig: this.config.nestedTaskConfig
          });
        }
        item.events.forEach(function(event) {
          return item.on(event, function() {
            var args;
            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            return me.emit.apply(me, ["group." + event, item].concat(slice.call(args)));
          });
        });
        this.emit('group.add', item);
      }
      item.events.forEach(function(event) {
        return item.on(event, function() {
          var args;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          return me.emit.apply(me, ["item." + event, item].concat(slice.call(args)));
        });
      });

      /*
      		 * Bubble item error event directly
      		item.on 'error', (args...) ->
      			me.emit('error', args...)
       */
      this.emit('item.add', item);
      item.done(function() {
        var args;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        return me.itemCompletionCallback.apply(me, [item].concat(slice.call(args)));
      });
      this.itemsRemaining.push(item);
      this.fire();
      return item;
    };

    TaskGroup.prototype.addItems = function() {
      var args, item, items;
      items = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      if (!Array.isArray(items)) {
        items = [items];
      }
      return (function() {
        var i, len, results1;
        results1 = [];
        for (i = 0, len = items.length; i < len; i++) {
          item = items[i];
          results1.push(this.addItem.apply(this, [item].concat(slice.call(args))));
        }
        return results1;
      }).call(this);
    };

    TaskGroup.prototype.createTask = function() {
      var args, task;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (Task.isTask(args[0])) {
        task = args[0];
        task.setConfig.apply(task, args.slice(1));
      } else {
        task = (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args);
          return Object(result) === result ? result : child;
        })(this.Task, args, function(){});
      }
      return task;
    };

    TaskGroup.prototype.addTask = function() {
      var args, task;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      task = this.addItem(this.createTask.apply(this, args));
      return this;
    };

    TaskGroup.prototype.addTasks = function() {
      var args, item, items, tasks;
      items = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      if (!Array.isArray(items)) {
        items = [items];
      }
      tasks = (function() {
        var i, len, results1;
        results1 = [];
        for (i = 0, len = items.length; i < len; i++) {
          item = items[i];
          results1.push(this.addTask.apply(this, [item].concat(slice.call(args))));
        }
        return results1;
      }).call(this);
      return this;
    };

    TaskGroup.prototype.createGroup = function() {
      var args, taskgroup;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (TaskGroup.isTaskGroup(args[0])) {
        taskgroup = args[0];
        taskgroup.setConfig.apply(taskgroup, args.slice(1));
      } else {
        taskgroup = (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args);
          return Object(result) === result ? result : child;
        })(this.TaskGroup, args, function(){});
      }
      return taskgroup;
    };

    TaskGroup.prototype.addGroup = function() {
      var args, group;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      group = this.addItem(this.createGroup.apply(this, args));
      return this;
    };

    TaskGroup.prototype.addGroups = function() {
      var args, groups, item, items;
      items = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      if (!Array.isArray(items)) {
        items = [items];
      }
      groups = (function() {
        var i, len, results1;
        results1 = [];
        for (i = 0, len = items.length; i < len; i++) {
          item = items[i];
          results1.push(this.addGroup.apply(this, [item].concat(slice.call(args))));
        }
        return results1;
      }).call(this);
      return this;
    };

    TaskGroup.prototype.getItemsTotal = function() {
      var completed, remaining, running, total;
      running = this.itemsRunning.length;
      remaining = this.itemsRemaining.length;
      completed = this.itemsCompleted.length;
      total = running + remaining + completed;
      return total;
    };

    TaskGroup.prototype.getItemNames = function() {
      var completed, remaining, results, running, total;
      running = this.itemsRunning.map(function(item) {
        return item.getName();
      });
      remaining = this.itemsRemaining.map(function(item) {
        return item.getName();
      });
      completed = this.itemsCompleted.map(function(item) {
        return item.getName();
      });
      results = this.results;
      total = running.length + remaining.length + completed.length;
      return {
        remaining: remaining,
        running: running,
        completed: completed,
        total: total,
        results: results
      };
    };

    TaskGroup.prototype.getItemTotals = function() {
      var completed, remaining, results, running, total;
      running = this.itemsRunning.length;
      remaining = this.itemsRemaining.length;
      completed = this.itemsCompleted.length;
      results = this.results.length;
      total = running + remaining + completed;
      return {
        remaining: remaining,
        running: running,
        completed: completed,
        total: total,
        results: results
      };
    };

    TaskGroup.prototype.hasRunning = function() {
      return this.itemsRunning.length !== 0;
    };

    TaskGroup.prototype.hasRemaining = function() {
      return this.itemsRemaining.length !== 0;
    };

    TaskGroup.prototype.hasItems = function() {
      return this.hasRunning() || this.hasRemaining();
    };

    TaskGroup.prototype.hasStarted = function() {
      return this.status !== null;
    };

    TaskGroup.prototype.hasResult = function() {
      return (this.err != null) || this.results.length !== 0;
    };

    TaskGroup.prototype.hasExited = function() {
      var ref1;
      return (ref1 = this.status) === 'completed' || ref1 === 'destroyed';
    };

    TaskGroup.prototype.hasSlots = function() {
      return this.config.concurrency === 0 || this.itemsRunning.length < this.config.concurrency;
    };

    TaskGroup.prototype.shouldPause = function() {
      return this.config.onError === 'exit' && (this.err != null);
    };

    TaskGroup.prototype.shouldFire = function() {
      return this.shouldPause() === false && this.hasRemaining() && this.hasSlots();
    };

    TaskGroup.prototype.isEmpty = function() {
      return this.hasItems() === false;
    };

    TaskGroup.prototype.isPaused = function() {
      return this.shouldPause() && this.hasRunning() === false;
    };

    TaskGroup.prototype.isComplete = function() {
      return this.hasStarted() && (this.isPaused() || this.isEmpty());
    };

    TaskGroup.prototype.complete = function() {
      var complete, i, item, len, ref1;
      complete = this.isComplete();
      if (complete) {
        this.emit('completed', this.err, this.results);
        this.err = null;
        ref1 = this.itemsCompleted;
        for (i = 0, len = ref1.length; i < len; i++) {
          item = ref1[i];
          item.destroy();
        }
        this.itemsCompleted = [];
      }
      return complete;
    };

    TaskGroup.prototype.whenDone = function(handler) {
      if (this.isComplete()) {
        this.queue((function(_this) {
          return function() {
            return handler.call(_this, _this.err, _this.results);
          };
        })(this));
      } else {
        TaskGroup.__super__.whenDone.call(this, handler);
      }
      return this;
    };

    TaskGroup.prototype.onceDone = function(handler) {
      if (this.isComplete()) {
        this.queue((function(_this) {
          return function() {
            return handler.call(_this, _this.err, _this.results);
          };
        })(this));
      } else {
        TaskGroup.__super__.onceDone.call(this, handler);
      }
      return this;
    };

    TaskGroup.prototype.resetResults = function() {
      this.results = [];
      return this;
    };

    TaskGroup.prototype.fireNextItems = function() {
      var item, items, result;
      items = [];
      while (true) {
        item = this.fireNextItem();
        if (item) {
          items.push(item);
        } else {
          break;
        }
      }
      result = items.length !== 0 ? items : false;
      return result;
    };

    TaskGroup.prototype.fireNextItem = function() {
      var fire, item, result;
      result = false;
      fire = this.shouldFire();
      if (fire) {
        if (this.status !== 'running') {
          this.emit(this.status = 'running');
        }
        item = this.itemsRemaining.shift();
        this.itemsRunning.push(item);
        item.run();
        result = item;
      }
      return result;
    };

    TaskGroup.prototype.itemCompletionCallback = function() {
      var args, index, indexError, item;
      item = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      if (this.config.onError === 'exit' && args[0]) {
        if (this.err == null) {
          this.err = args[0];
        }
      }
      index = this.itemsRunning.indexOf(item);
      if (index === -1) {
        if (this.err == null) {
          this.err = indexError = new Error("Could not find [" + (item.getNames()) + "] in the running queue");
        }
        console.error(indexError.stack || indexError);
      } else {
        this.itemsRunning = this.itemsRunning.slice(0, index).concat(this.itemsRunning.slice(index + 1));
      }
      this.itemsCompleted.push(item);
      if (item.config.includeInResults !== false) {
        this.results.push(args);
      }
      this.fire();
      return this;
    };

    TaskGroup.prototype.fire = function() {
      if (this.hasStarted()) {
        if (this.isComplete()) {
          this.exit();
        } else if (this.shouldPause() === false) {
          this.fireNextItems();
        }
      }
      return this;
    };

    TaskGroup.prototype.clear = function() {
      var i, item, len, ref1;
      ref1 = this.itemsRemaining;
      for (i = 0, len = ref1.length; i < len; i++) {
        item = ref1[i];
        item.destroy();
      }
      this.itemsRemaining = [];
      return this;
    };

    TaskGroup.prototype.destroy = function() {
      this.clear();
      this.done((function(_this) {
        return function() {
          if (_this.status === 'destroyed') {
            return;
          }
          _this.emit(_this.status = 'destroyed');
          _this.resetResults();
          return _this.removeAllListeners();
        };
      })(this));
      return this;
    };

    TaskGroup.prototype.exit = function(err) {
      if (err != null) {
        if (this.err == null) {
          this.err = err;
        }
      }
      this.status = (this.err != null ? 'failed' : 'passed');
      this.emit(this.status, this.err);
      this.complete();
      return this;
    };

    TaskGroup.prototype.run = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      this.queue((function(_this) {
        return function() {
          _this.emit(_this.status = 'started');
          return _this.fire();
        };
      })(this));
      return this;
    };

    return TaskGroup;

  })(Interface);

  TaskGroup.Task = Task;

  TaskGroup.TaskGroup = TaskGroup;

  module.exports = TaskGroup;

}).call(this);
