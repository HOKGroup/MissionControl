'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const path = require('path');
const os = require('os');
const fs = require('fs-extra');
const uuid = require('uuid');
const opn = require('opn');
const nodemailer = require('nodemailer');
const moment = require('moment');
const pug = require('pug');

const transport = nodemailer.createTransport({
  jsonTransport: true
});

const templateFilePath = path.join(__dirname, '..', 'template.pug');

const renderFilePromise = (view, locals) => {
  return new Promise((resolve, reject) => {
    pug.renderFile(view, locals, (err, html) => {
      if (err) return reject(err);
      resolve(html);
    });
  });
};

const previewEmail = (message, id, open = true) => {
  return new Promise((() => {
    var _ref = _asyncToGenerator(function* (resolve, reject) {
      try {
        if (typeof message !== 'object') throw new Error('Message argument is required');

        if (!id) id = uuid.v4();

        const res = yield transport.sendMail(message);

        res.message = JSON.parse(res.message);

        const html = yield renderFilePromise(templateFilePath, Object.assign(res.message, {
          cache: true,
          pretty: true,
          moment
        }));

        const filePath = `${os.tmpdir()}/${id}.html`;
        yield fs.writeFile(filePath, html);

        if (open) yield opn(filePath, { wait: false });

        resolve(`file://${filePath}`);
      } catch (err) {
        reject(err);
      }
    });

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  })());
};

module.exports = previewEmail;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsIm9zIiwiZnMiLCJ1dWlkIiwib3BuIiwibm9kZW1haWxlciIsIm1vbWVudCIsInB1ZyIsInRyYW5zcG9ydCIsImNyZWF0ZVRyYW5zcG9ydCIsImpzb25UcmFuc3BvcnQiLCJ0ZW1wbGF0ZUZpbGVQYXRoIiwiam9pbiIsIl9fZGlybmFtZSIsInJlbmRlckZpbGVQcm9taXNlIiwidmlldyIsImxvY2FscyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVuZGVyRmlsZSIsImVyciIsImh0bWwiLCJwcmV2aWV3RW1haWwiLCJtZXNzYWdlIiwiaWQiLCJvcGVuIiwiRXJyb3IiLCJ2NCIsInJlcyIsInNlbmRNYWlsIiwiSlNPTiIsInBhcnNlIiwiT2JqZWN0IiwiYXNzaWduIiwiY2FjaGUiLCJwcmV0dHkiLCJmaWxlUGF0aCIsInRtcGRpciIsIndyaXRlRmlsZSIsIndhaXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTUEsT0FBT0MsUUFBUSxNQUFSLENBQWI7QUFDQSxNQUFNQyxLQUFLRCxRQUFRLElBQVIsQ0FBWDtBQUNBLE1BQU1FLEtBQUtGLFFBQVEsVUFBUixDQUFYO0FBQ0EsTUFBTUcsT0FBT0gsUUFBUSxNQUFSLENBQWI7QUFDQSxNQUFNSSxNQUFNSixRQUFRLEtBQVIsQ0FBWjtBQUNBLE1BQU1LLGFBQWFMLFFBQVEsWUFBUixDQUFuQjtBQUNBLE1BQU1NLFNBQVNOLFFBQVEsUUFBUixDQUFmO0FBQ0EsTUFBTU8sTUFBTVAsUUFBUSxLQUFSLENBQVo7O0FBRUEsTUFBTVEsWUFBWUgsV0FBV0ksZUFBWCxDQUEyQjtBQUMzQ0MsaUJBQWU7QUFENEIsQ0FBM0IsQ0FBbEI7O0FBSUEsTUFBTUMsbUJBQW1CWixLQUFLYSxJQUFMLENBQVVDLFNBQVYsRUFBcUIsSUFBckIsRUFBMkIsY0FBM0IsQ0FBekI7O0FBRUEsTUFBTUMsb0JBQW9CLENBQUNDLElBQUQsRUFBT0MsTUFBUCxLQUFrQjtBQUMxQyxTQUFPLElBQUlDLE9BQUosQ0FBWSxDQUFDQyxPQUFELEVBQVVDLE1BQVYsS0FBcUI7QUFDdENaLFFBQUlhLFVBQUosQ0FBZUwsSUFBZixFQUFxQkMsTUFBckIsRUFBNkIsQ0FBQ0ssR0FBRCxFQUFNQyxJQUFOLEtBQWU7QUFDMUMsVUFBSUQsR0FBSixFQUFTLE9BQU9GLE9BQU9FLEdBQVAsQ0FBUDtBQUNUSCxjQUFRSSxJQUFSO0FBQ0QsS0FIRDtBQUlELEdBTE0sQ0FBUDtBQU1ELENBUEQ7O0FBU0EsTUFBTUMsZUFBZSxDQUFDQyxPQUFELEVBQVVDLEVBQVYsRUFBY0MsT0FBTyxJQUFyQixLQUE4QjtBQUNqRCxTQUFPLElBQUlULE9BQUo7QUFBQSxpQ0FBWSxXQUFPQyxPQUFQLEVBQWdCQyxNQUFoQixFQUEyQjtBQUM1QyxVQUFJO0FBQ0YsWUFBSSxPQUFPSyxPQUFQLEtBQW1CLFFBQXZCLEVBQ0UsTUFBTSxJQUFJRyxLQUFKLENBQVUsOEJBQVYsQ0FBTjs7QUFFRixZQUFJLENBQUNGLEVBQUwsRUFBU0EsS0FBS3RCLEtBQUt5QixFQUFMLEVBQUw7O0FBRVQsY0FBTUMsTUFBTSxNQUFNckIsVUFBVXNCLFFBQVYsQ0FBbUJOLE9BQW5CLENBQWxCOztBQUVBSyxZQUFJTCxPQUFKLEdBQWNPLEtBQUtDLEtBQUwsQ0FBV0gsSUFBSUwsT0FBZixDQUFkOztBQUVBLGNBQU1GLE9BQU8sTUFBTVIsa0JBQ2pCSCxnQkFEaUIsRUFFakJzQixPQUFPQyxNQUFQLENBQWNMLElBQUlMLE9BQWxCLEVBQTJCO0FBQ3pCVyxpQkFBTyxJQURrQjtBQUV6QkMsa0JBQVEsSUFGaUI7QUFHekI5QjtBQUh5QixTQUEzQixDQUZpQixDQUFuQjs7QUFTQSxjQUFNK0IsV0FBWSxHQUFFcEMsR0FBR3FDLE1BQUgsRUFBWSxJQUFHYixFQUFHLE9BQXRDO0FBQ0EsY0FBTXZCLEdBQUdxQyxTQUFILENBQWFGLFFBQWIsRUFBdUJmLElBQXZCLENBQU47O0FBRUEsWUFBSUksSUFBSixFQUFVLE1BQU10QixJQUFJaUMsUUFBSixFQUFjLEVBQUVHLE1BQU0sS0FBUixFQUFkLENBQU47O0FBRVZ0QixnQkFBUyxVQUFTbUIsUUFBUyxFQUEzQjtBQUNELE9BekJELENBeUJFLE9BQU9oQixHQUFQLEVBQVk7QUFDWkYsZUFBT0UsR0FBUDtBQUNEO0FBQ0YsS0E3Qk07O0FBQUE7QUFBQTtBQUFBO0FBQUEsT0FBUDtBQThCRCxDQS9CRDs7QUFpQ0FvQixPQUFPQyxPQUFQLEdBQWlCbkIsWUFBakIiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3Qgb3MgPSByZXF1aXJlKCdvcycpO1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcy1leHRyYScpO1xuY29uc3QgdXVpZCA9IHJlcXVpcmUoJ3V1aWQnKTtcbmNvbnN0IG9wbiA9IHJlcXVpcmUoJ29wbicpO1xuY29uc3Qgbm9kZW1haWxlciA9IHJlcXVpcmUoJ25vZGVtYWlsZXInKTtcbmNvbnN0IG1vbWVudCA9IHJlcXVpcmUoJ21vbWVudCcpO1xuY29uc3QgcHVnID0gcmVxdWlyZSgncHVnJyk7XG5cbmNvbnN0IHRyYW5zcG9ydCA9IG5vZGVtYWlsZXIuY3JlYXRlVHJhbnNwb3J0KHtcbiAganNvblRyYW5zcG9ydDogdHJ1ZVxufSk7XG5cbmNvbnN0IHRlbXBsYXRlRmlsZVBhdGggPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4nLCAndGVtcGxhdGUucHVnJyk7XG5cbmNvbnN0IHJlbmRlckZpbGVQcm9taXNlID0gKHZpZXcsIGxvY2FscykgPT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIHB1Zy5yZW5kZXJGaWxlKHZpZXcsIGxvY2FscywgKGVyciwgaHRtbCkgPT4ge1xuICAgICAgaWYgKGVycikgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgcmVzb2x2ZShodG1sKTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG5jb25zdCBwcmV2aWV3RW1haWwgPSAobWVzc2FnZSwgaWQsIG9wZW4gPSB0cnVlKSA9PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShhc3luYyAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICh0eXBlb2YgbWVzc2FnZSAhPT0gJ29iamVjdCcpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTWVzc2FnZSBhcmd1bWVudCBpcyByZXF1aXJlZCcpO1xuXG4gICAgICBpZiAoIWlkKSBpZCA9IHV1aWQudjQoKTtcblxuICAgICAgY29uc3QgcmVzID0gYXdhaXQgdHJhbnNwb3J0LnNlbmRNYWlsKG1lc3NhZ2UpO1xuXG4gICAgICByZXMubWVzc2FnZSA9IEpTT04ucGFyc2UocmVzLm1lc3NhZ2UpO1xuXG4gICAgICBjb25zdCBodG1sID0gYXdhaXQgcmVuZGVyRmlsZVByb21pc2UoXG4gICAgICAgIHRlbXBsYXRlRmlsZVBhdGgsXG4gICAgICAgIE9iamVjdC5hc3NpZ24ocmVzLm1lc3NhZ2UsIHtcbiAgICAgICAgICBjYWNoZTogdHJ1ZSxcbiAgICAgICAgICBwcmV0dHk6IHRydWUsXG4gICAgICAgICAgbW9tZW50XG4gICAgICAgIH0pXG4gICAgICApO1xuXG4gICAgICBjb25zdCBmaWxlUGF0aCA9IGAke29zLnRtcGRpcigpfS8ke2lkfS5odG1sYDtcbiAgICAgIGF3YWl0IGZzLndyaXRlRmlsZShmaWxlUGF0aCwgaHRtbCk7XG5cbiAgICAgIGlmIChvcGVuKSBhd2FpdCBvcG4oZmlsZVBhdGgsIHsgd2FpdDogZmFsc2UgfSk7XG5cbiAgICAgIHJlc29sdmUoYGZpbGU6Ly8ke2ZpbGVQYXRofWApO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmVqZWN0KGVycik7XG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gcHJldmlld0VtYWlsO1xuIl19